texto
"Página 1 de 42 Desarrollo de Sw Página 2 de 42 CICLO DE VIDA DEL SOFTWARE Introducción a la Ingeniería del Software 2 Página 3 de 42 Comparativa de metodologías Página 4 de 42 TRADICIONALES MODELOS DE PROCESOS Introducción a la Ingeniería del Software 4 • Modelo en Cascada • Modelo Incremental • Modelo en V • Modelo de Prototipos • Modelo en Espiral Página 5 de 42 MODELO EN CASCADA Introducción a la Ingeniería del Software 5 Página 6 de 42 Ventajas Introducción a la Ingeniería del Software 6 Requerimientos deben especificarse en el primer paso 4 tareas principales deben se completadas antes que el sw sea empaquetado para ser distribuido La salida de una etapa es la entrada de la siguiente Puede hacerse seguimiento al proyecto de sw mientras se realice secuencialmente a través de etapa específicas e identificables Página 7 de 42 Desventajas Introducción a la Ingeniería del Software 7 Especificar requerimientos con precisión y completitud antes de la implementación Cambios de requerimientos en posteriores etapas. Requerimientos pueden no reflejar verdaderas necesidades de los usuarios Versión ejecutable del software al final del proceso de desarrollo Página 8 de 42 MODELO INCREMENTAL Introducción a la Ingeniería del Software 8 Página 9 de 42 MODELO INCREMENTAL Introducción a la Ingeniería del Software 9 Página 10 de 42 Ventajas Introducción a la Ingeniería del Software 10 Uso del método divide y vencerás Se reduce el tiempo de desarrollo Entregas tempranas de partes operativas del producto Desventajas Desacoplamiento de las partes Solapamiento de los incrementos Requiere de una planeación cuidadosa tanto a nivel administrativo como técnico Página 11 de 42 MODELO EN V Introducción a la Ingeniería del Software 11 Página 12 de 42 Ventajas Introducción a la Ingeniería del Software 12 Es apropiado cuando los requerimientos son bien definidos desde el inicio Ahorro de tiempo al diseñar las pruebas antes de la codificación Los defectos se encuentran en una etapa temprana Evita el flujo de los defectos hacia posteriores etapas Funciona bien para pequeños proyectos donde los requerimientos son fácilmente entendidos Página 13 de 42 Desventajas Introducción a la Ingeniería del Software 13 Si los requerimientos no son bien definidos desde el inicio del proyecto, surgirán problemas mientras se continúe con su finalización Bastante rígido El software se produce en la fase de implementación, ningún prototipo inicial es producido Si cambios ocurren a mitad de camino, los documentos de prueba junto con los documentos de requerimientos tiene que ser actualizados Página 14 de 42 MODELO DE PROTOTIPOS Introducción a la Ingeniería del Software 14 Página 15 de 42 Introducción a la Ingeniería del Software 15 • Ventajas • En lugar de concentrarse en la documentación, más esfuerzo se da en la creación del software. • El software se crea mediante la retroalimentación de usuarios. • Mayor posibilidad de que el software que resulta ser más aceptable para los usuarios. • Si algo es desfavorable, se puede cambiar. El software se crea con el cliente en mente. Página 16 de 42 Introducción a la Ingeniería del Software 16 • Desventajas • A menudo, los usuarios sienten que unos pequeños cambios en el prototipo será suficiente para sus necesidades. No se dan cuenta que el prototipo es sólo para fines de demostración y no es el software real. • Gran cantidad de otras actividades como el diseño, codificación, depuración y actividades relacionadas con la calidad son desarrolladas para el software real. • Los desarrolladores pueden perder el foco en el objetivo real del prototipo y el compromiso de la calidad del producto. • Un prototipo no tiene personalidad jurídica en caso de litigio. Página 17 de 42 MODELO ESPIRAL Introducción a la Ingeniería del Software 17 Página 18 de 42 Introducción a la Ingeniería del Software 18 Página 19 de 42 Escenario de los 4 cuadrantes Introducción a la Ingeniería del Software 19 1. Identificar los objetivos, alternativas o restricciones para ciclo 2. Evaluar las alternativas en relación a los objetivos y restricciones. Muchos de los riesgos son identificados y evaluados 3. Según la cantidad de riesgos, se desarrolla un prototipo, se evalúa con mayor detalle para reducir los riesgos. Si los riesgos son sustancialmente reducidos, se procede con las siguientes etapas 4. Validar los logros y planificar el siguiente ciclo Página 20 de 42 Ventajas Introducción a la Ingeniería del Software 20 Pospone la elaboración de elementos de sw de bajo riesgo. Incopora prototipos como estrategia de reducción de riesgos. Se adapta a cambios en la evolución del ciclo de vida y necesidades. Detección temprana de errores y defectos de diseño. Desventaja Depende de la capacidad de los ingenieros de sw para identificar las fuentes de riesgos Página 21 de 42 RATIONAL UNIFIED PROCESS (RUP) Introducción a la Ingeniería del Software 21 • Marco de Trabajo de procesos de software. • Experiencias del modelo de proceso iterativo e incremental y del modelo espiral. • Principales conceptos: oCaso de uso y requerimientos oCentrado en la arquitectura: aspectos estáticos y dinámicos oIterativo e Incremental Página 22 de 42 Fases de RUP Introducción a la Ingeniería del Software 22 Página 23 de 42 RUP: Fase de inicio Introducción a la Ingeniería del Software 23 • Fase de planificación con los siguientes objetivos:  Establecer el alcance y aclarar los objetivos del proyecto de software.  Establecer los casos de uso críticos y los principales escenarios que impulsarán la arquitectura y el diseño.  Establecer una arquitectura y las alternativas de diseño.  Estimar el calendario y los recursos necesarios.  Planificar la implementación, pruebas, integración y metodologías de configuración.  Estimar los riesgos potenciales. Página 24 de 42 RUP: Fase de elaboración Introducción a la Ingeniería del Software 24 • Fase crítica del proceso • Debe resolver todas las incertidumbres • Principales objetivos son:  Establecer los requisitos importantes y críticos para el sistema.  Establecer y demostrar el diseño de referencia.  Establecer la implementación, prueba y plataformas de integración y metodologías.  Establecer los principales escenarios de prueba.  Establecer la medición y las métricas de los objetivos acordados.  Organizar y establecer los recursos necesarios para su implementación, las pruebas, y la integración Página 25 de 42 RUP: Fase de construcción Introducción a la Ingeniería del Software 25 • Se obtiene el código completado para el software • Prueba todos los principales requerimientos • Los principales objetivos de esta fase son:  Completar la implementación dentro del tiempo y costo estimado.  Lograr la versión del código que es liberable a un conjunto restringido de prueba Alfa  Establecer las demás actividades que se tienen que hacer para alcanzar los objetivos del proyecto. Página 26 de 42 RUP: Fase de transición Introducción a la Ingeniería del Software 26 • Ultima fase antes de la publicación del software • Todos los arreglos y componentes son integrados • También se integran los manuales y materiales de entrenamiento. • Como principales objetivos se tienen: • Establecer el producto software final para el lanzamiento • Establecer la disposición del usuario y la aceptación del software. • Establecer soporte. • Obtener consentimiento para la liberación y el despliegue. Página 27 de 42 Comparativa Fases Predictivas vs Agiles Página 28 de 42 28 Scrum lifecycle Página 29 de 42 29 Página 30 de 42 SCRUM Página 31 de 42 XP Página 32 de 42 32 Template for writing user history Página 33 de 42 Crystal Página 34 de 42 Crystal Página 35 de 42 Crystal Página 36 de 42 36 Crystal increment lifecycle Página 37 de 42 Página 38 de 42 Kanban Página 39 de 42 CRISP-DM Página 40 de 42 Fases de CRISP-DM • Fase I. Business Understanding. Definición de necesidades del cliente (comprensión del negocio) • Fase II. Data Understanding. Estudio y comprensión de los datos • Fase III. Data Preparation. Análisis de los datos y selección de características • Fase IV. Modeling. Modelado • Fase V. Evaluation. Evaluación (obtención de resultados) • Fase VI. Deployment. Despliegue (puesta en producción) Página 41 de 42 Limitaciones de CRISP-DM • Surge en el momento en las EBT se centran en extraer conocimiento de los datos • Incluye actividades de carácter exploratorio analizando los datos para determinar los objetivos del negocio • Disponibilidad de datos de calidad • Datos disponibles en distintos momentos de tiempo • Carece de procesos para la gobernanza de los datos • Carece de actividades del desarrollo de software Página 42 de 42 CRISP-DM en los proyectos actuales de ciencia de datos • Metodología orientada a procesos • Establece un vocabulario común • Permite coordinar actividades • Ayuda en la gestión de las expectativas "
